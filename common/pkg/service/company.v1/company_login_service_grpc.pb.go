// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: company_login_service.proto

package company_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CompanyLoginService_Login_FullMethodName             = "/company.v1.CompanyLoginService/Login"
	CompanyLoginService_Register_FullMethodName          = "/company.v1.CompanyLoginService/Register"
	CompanyLoginService_CheckCompanyToken_FullMethodName = "/company.v1.CompanyLoginService/CheckCompanyToken"
)

// CompanyLoginServiceClient is the client API for CompanyLoginService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompanyLoginServiceClient interface {
	Login(ctx context.Context, in *CompanyLoginRequest, opts ...grpc.CallOption) (*CompanyLoginResponse, error)
	Register(ctx context.Context, in *CompanyRegisterRequest, opts ...grpc.CallOption) (*CompanyRegisterResponse, error)
	CheckCompanyToken(ctx context.Context, in *CheckCompanyTokenRequest, opts ...grpc.CallOption) (*CheckCompanyTokenResponse, error)
}

type companyLoginServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCompanyLoginServiceClient(cc grpc.ClientConnInterface) CompanyLoginServiceClient {
	return &companyLoginServiceClient{cc}
}

func (c *companyLoginServiceClient) Login(ctx context.Context, in *CompanyLoginRequest, opts ...grpc.CallOption) (*CompanyLoginResponse, error) {
	out := new(CompanyLoginResponse)
	err := c.cc.Invoke(ctx, CompanyLoginService_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyLoginServiceClient) Register(ctx context.Context, in *CompanyRegisterRequest, opts ...grpc.CallOption) (*CompanyRegisterResponse, error) {
	out := new(CompanyRegisterResponse)
	err := c.cc.Invoke(ctx, CompanyLoginService_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyLoginServiceClient) CheckCompanyToken(ctx context.Context, in *CheckCompanyTokenRequest, opts ...grpc.CallOption) (*CheckCompanyTokenResponse, error) {
	out := new(CheckCompanyTokenResponse)
	err := c.cc.Invoke(ctx, CompanyLoginService_CheckCompanyToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompanyLoginServiceServer is the server API for CompanyLoginService service.
// All implementations must embed UnimplementedCompanyLoginServiceServer
// for forward compatibility
type CompanyLoginServiceServer interface {
	Login(context.Context, *CompanyLoginRequest) (*CompanyLoginResponse, error)
	Register(context.Context, *CompanyRegisterRequest) (*CompanyRegisterResponse, error)
	CheckCompanyToken(context.Context, *CheckCompanyTokenRequest) (*CheckCompanyTokenResponse, error)
	mustEmbedUnimplementedCompanyLoginServiceServer()
}

// UnimplementedCompanyLoginServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCompanyLoginServiceServer struct {
}

func (UnimplementedCompanyLoginServiceServer) Login(context.Context, *CompanyLoginRequest) (*CompanyLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedCompanyLoginServiceServer) Register(context.Context, *CompanyRegisterRequest) (*CompanyRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedCompanyLoginServiceServer) CheckCompanyToken(context.Context, *CheckCompanyTokenRequest) (*CheckCompanyTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCompanyToken not implemented")
}
func (UnimplementedCompanyLoginServiceServer) mustEmbedUnimplementedCompanyLoginServiceServer() {}

// UnsafeCompanyLoginServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompanyLoginServiceServer will
// result in compilation errors.
type UnsafeCompanyLoginServiceServer interface {
	mustEmbedUnimplementedCompanyLoginServiceServer()
}

func RegisterCompanyLoginServiceServer(s grpc.ServiceRegistrar, srv CompanyLoginServiceServer) {
	s.RegisterService(&CompanyLoginService_ServiceDesc, srv)
}

func _CompanyLoginService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyLoginServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyLoginService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyLoginServiceServer).Login(ctx, req.(*CompanyLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyLoginService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyLoginServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyLoginService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyLoginServiceServer).Register(ctx, req.(*CompanyRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyLoginService_CheckCompanyToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckCompanyTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyLoginServiceServer).CheckCompanyToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyLoginService_CheckCompanyToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyLoginServiceServer).CheckCompanyToken(ctx, req.(*CheckCompanyTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CompanyLoginService_ServiceDesc is the grpc.ServiceDesc for CompanyLoginService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CompanyLoginService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "company.v1.CompanyLoginService",
	HandlerType: (*CompanyLoginServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _CompanyLoginService_Login_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _CompanyLoginService_Register_Handler,
		},
		{
			MethodName: "CheckCompanyToken",
			Handler:    _CompanyLoginService_CheckCompanyToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "company_login_service.proto",
}
